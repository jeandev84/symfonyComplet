<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;


/**
 * @ORM\Entity(repositoryClass="App\Repository\UserRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class User
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /** @var \DateTime */
    private $createdAt;

    /**
     * @ORM\OneToMany(
     *     targetEntity="App\Entity\Video",
     *     mappedBy="user",
     *     cascade={"remove"},
     *     orphanRemoval=true
     *     )
     */
    private $videos;

    /**
     * @ORM\OneToOne(targetEntity="App\Entity\Address", cascade={"persist", "remove"})
     */
    private $address;

    public function __construct()
    {
        $this->videos = new ArrayCollection();
    }


    /**
     * @ORM\PrePersist()
     */
    public function setCreatedAtValue()
    {
        # This code will be called automatically, when will be create a new user.
        $this->createdAt = new \DateTime();
        dump($this->createdAt);
    }

    /*
     * @ORM\PrePersist()
    public function prePersist()
    {
        $this->createdAt = new \DateTime();
        dump($this->createdAt);
    }
    */


    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * @return Collection|Video[]
     */
    public function getVideos(): Collection
    {
        return $this->videos;
    }

    public function addVideo(Video $video): self
    {
        if (!$this->videos->contains($video)) {
            $this->videos[] = $video;
            $video->setUser($this);
        }

        return $this;
    }

    public function removeVideo(Video $video): self
    {
        if ($this->videos->contains($video)) {
            $this->videos->removeElement($video);
            // set the owning side to null (unless already changed)
            if ($video->getUser() === $this) {
                $video->setUser(null);
            }
        }

        return $this;
    }

    public function getAddress(): ?Address
    {
        return $this->address;
    }

    public function setAddress(?Address $address): self
    {
        $this->address = $address;

        return $this;
    }

}
